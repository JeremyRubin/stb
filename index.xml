<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BIP-119 on utxos.org -- Bitcoin for Everyone</title><link>https://utxos.org/</link><description>Recent content in BIP-119 on utxos.org -- Bitcoin for Everyone</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Jun 2017 18:27:58 +0100</lastBuildDate><atom:link href="https://utxos.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Scaling</title><link>https://utxos.org/uses/scaling/</link><pubDate>Thu, 10 Oct 2019 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/scaling/</guid><description>When there is a high demand for blockspace it becomes very expensive to make transactions. By using OP_CHECKTEMPLATEVERIFY, a large volume payment processor may aggregate all their payments into a single O(1) transaction for purposes of confirmation. Then, some time later, the payments can be expanded out of that UTXO when the demand for blockspace is decreased.
Without OP_CHECKTEMPLATEVERIFY, this is still possible to do with Schnorr signatures (even with ECDSA given multiparty schemes).</description></item><item><title>Soft Fork Bets</title><link>https://utxos.org/uses/taproot-bet/</link><pubDate>Mon, 08 Mar 2021 00:00:00 -0700</pubDate><guid>https://utxos.org/uses/taproot-bet/</guid><description>Can we design a contract which allows someone to automatically place a series of bets on if Taproot was active (by spreading the bet over a longer window, you can hedge the total risk if you aren’t sure the exact period it would activate; it also makes the contract more interesting… The diagram above gives a high level overview of the logic we want to implement&amp;hellip;
Continue Reading on Bitmex Blog&amp;hellip;</description></item><item><title>Decentralized options</title><link>https://utxos.org/uses/options/</link><pubDate>Sun, 11 Oct 2020 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/options/</guid><description>Trading of bitcoin derivatives is a huge market nowadays. However, all of it occurs on centralized exchanges with large legal &amp;amp; technical risks that require trust in their operators, thus betraying the philosophy of Bitcoin. The protocol presented here enables the creation and redemption of trustless options on the Bitcoin network.
Main protocol Option creation will follow this protocol:
Use an atomic swap to sync these two operations: User pays fee to underwriter Underwriter sends tokenized USD [1] to an address that is encumbered by the script: After X+K blocks: Send to underwriter After X blocks: If spending tx sends Y BTC to underwriter, send to user When the option reaches maturity the user can exercise it by sending a transaction that: Sends BTC to underwriter Spends the UTXO created on step 1 and sends it to the user&amp;rsquo;s wallet If the user doesn&amp;rsquo;t exercise it on time the underwriter can just spend it to itself Reduction of capital requirement As it is, this protocol requires locking 100% of the collateral for as long as the option stays in effect, but it would also be possible to reduce the capital requirement quite substantially by changing the protocol to make the underwriter lock only 30-50% initially and, at option expiration, make it provide the rest of the payment in case the user decides to exercise the option.</description></item><item><title>Drivechains</title><link>https://utxos.org/uses/drivechains/</link><pubDate>Sun, 11 Oct 2020 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/drivechains/</guid><description>Partial Retraction &amp;ndash; Please See Below Drivechain&amp;rsquo;s peg-out mechanism could be implemented at the transaction level through scripts that force the funds being withdrawn from the sidechain to go through a chain of N transactions, each one of these being in a different block. More specifically, this would be implemented by creating N scripts that would contain an integer constant and would only be spendable to another copy of the same script with the constant increased or decreased by one, with the exception of the script where the constant reaches the value N, in which case the UTXO would be spendable only to a specific address provided in the beginning of the process.</description></item><item><title>Resources</title><link>https://utxos.org/resources/</link><pubDate>Thu, 28 May 2020 17:48:34 -0700</pubDate><guid>https://utxos.org/resources/</guid><description>This page serves as a general index of resources.
If something is missing, leave a comment or open a pull request on Github.
BIP: Specification Pull Request Branch Example RPCs Tools Sapio Sapio is a programming language for CTV contracts.
Book Repo Minsc A CTV compatible compiler with an example playground
Simple CTV Vault A simple client in python for basic vaults.
Python Vaults A sophisticated recursive vault as a python program, using CTV or pre-signing.</description></item><item><title>Batching Simulation</title><link>https://utxos.org/analysis/batching_sim/</link><pubDate>Thu, 28 May 2020 15:48:24 -0700</pubDate><guid>https://utxos.org/analysis/batching_sim/</guid><description>Check Template Verify is a new opcode for Bitcoin which allows transaction issuers to split up their transaction into send and receive components. See https://utxos.org for more information. This is potentially a big benefit because end users can realize faster confirmations on pending transactions.
There is a concern that CTV would result in higher overall chain utilization (because of overhead) than existing batching solutions. Ignoring the benefits that CTV can have for earlier confirmations, it would be bad to introduce a change to Bitcoin that causes users to be wasteful of chain space.</description></item><item><title>Tax Considerations</title><link>https://utxos.org/analysis/taxes/</link><pubDate>Wed, 18 Dec 2019 10:41:53 -0800</pubDate><guid>https://utxos.org/analysis/taxes/</guid><description>In this article, we&amp;rsquo;ll discuss basic tax law around payments, establish an analogy between OP_CHECKTEMPLATEVERIFY and traditional certified cheques, and then discuss the relevant tax consequences.
In the &amp;ldquo;legacy&amp;rdquo; financial world, a cheque1 is commonly used to move funds from financial institutions in lieu of inconvenient physical cash transfers. To date, Bitcoin has not needed the concept of a cheque because Bitcoin transactions are direct transfers with no intermediary, i.e., as cash is to a cheque.</description></item><item><title>Batch Channels</title><link>https://utxos.org/uses/batch-channels/</link><pubDate>Fri, 18 Oct 2019 10:46:27 -0700</pubDate><guid>https://utxos.org/uses/batch-channels/</guid><description>Using OP_CHECKTEMPLATEVERIFY for Channel Factories is similar to the use for Congestion Control, except the leaf nodes should be set up as a channels instead of plain payments. The channel can be between the sender and recipient or a target of recipient&amp;rsquo;s choice. Using an OP_CHECKTEMPLATEVERIFY, the recipient may even give the sender an address which makes a set of channels unbeknownst to them.
These channels are already time insensitive for setup, as all punishments can be relative timelocked to the actual instantiation.</description></item><item><title>Non Interactive Channels</title><link>https://utxos.org/uses/non-interactive-channels/</link><pubDate>Fri, 18 Oct 2019 10:46:13 -0700</pubDate><guid>https://utxos.org/uses/non-interactive-channels/</guid><description>Normally, when opening a payment channel, you require participation from both parties to the channel. This is because the Lightning Network uses pre-signed multi-sig type transactions to ensure that a channel can always be exited by either party, before entering.
With OP_CHECKTEMPLATEVERIFY, it&amp;rsquo;s possible for a single party to construct a channel which either party can exit from without requiring signatures from both parties.
These payment channels can operate in one direction, paying to the channel &amp;ldquo;listener&amp;rdquo; without need for their private key to be online.</description></item><item><title>Trustless Coordination-Free Mining Pools</title><link>https://utxos.org/uses/miningpools/</link><pubDate>Fri, 18 Oct 2019 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/miningpools/</guid><description>In a typical mining pool, miners works together to create a shared block reward. The shared reward is distributed among participants based on difficulty shares, that is, partial work proofs that &amp;ldquo;prove&amp;rdquo; a miner was working on an appropriate block.
An appropriate block pays the reward to the pool operator, who then distributes (less a fee) the rewards to the other miners.
Using OP_CHECKTEMPLATEVERIFY, miners can instead look at a set of qualified historical blocks deterministically (e.</description></item><item><title>Vaults</title><link>https://utxos.org/uses/vaults/</link><pubDate>Fri, 18 Oct 2019 10:45:51 -0700</pubDate><guid>https://utxos.org/uses/vaults/</guid><description>When greater security is required for cold storage solutions, there can be default Tapscript paths that move funds from one target to another target.
For example, a cold wallet can be set up where one customer support desk can, without further authorization, move a portion of the funds (using multiple pre-set amounts) into a lukewarm wallet operated by an isolated support desk. The support desk can then issue some funds to a hot wallet, and send the remainder back to cold storage with a similar withdrawal mechanism in place.</description></item><item><title>Safer Hashed Time Locked Contracts (HTLCS) Limits</title><link>https://utxos.org/uses/htlcs/</link><pubDate>Fri, 18 Oct 2019 10:30:40 -0700</pubDate><guid>https://utxos.org/uses/htlcs/</guid><description>In the Lightning Network protocol, Hashed Time Locked Contracts (HTLCS) are used in the construction of channels. A new HTLC is required per route that the channel is serving in.
In BOLT #2, this maximum number of HTLCs in a channel is hard limited to 483 as the maximum safe size to prevent the transaction from being too large to be valid. Adding more HTLCs would interfere with being able to broadcast and confirm a transaction.</description></item><item><title>Congestion Simulation</title><link>https://utxos.org/analysis/bip_simulation/</link><pubDate>Fri, 11 Oct 2019 15:48:24 -0700</pubDate><guid>https://utxos.org/analysis/bip_simulation/</guid><description>An earlier version of this document used the poission distribution of the average block interval rahter than the exponential, which led to innacurate results. A discussion of this error can be found here. The error in the code has been corrected in the following article, but the diagrams still need to be re-generated.
The below simulation results show that OP_CHECKTEMPLATEVERIFY is an effective too to reduce network strain in Bitcoin. This is based on the same simulation used in the BIP.</description></item><item><title>Bitcoin Optech Newsletter #48</title><link>https://utxos.org/analysis/optech/</link><pubDate>Thu, 10 Oct 2019 17:31:05 -0700</pubDate><guid>https://utxos.org/analysis/optech/</guid><description>This article was orignally featured in Bitcoin Optech Newsletter #48, and has been excerpted, abbridged, and updated slightly for accuracy with the most recent iteration of the BIP for this page. The original OpTech content may be found here. OpTech&amp;rsquo;s content is offered under the MIT License.
The proposed opcode OP_CHECKTEMPLATEVERIFY allows an address to commit to one or more branches that require the transaction spending them to include a certain set of outputs, a technique that contract protocol researchers call a covenant.</description></item><item><title>Alternative Designs</title><link>https://utxos.org/alternatives/</link><pubDate>Sat, 28 Sep 2019 17:48:34 -0700</pubDate><guid>https://utxos.org/alternatives/</guid><description>BIP-0119 OP_CHECKTEMPLATEVERIFY has a multitude of benefits for the Bitcoin ecosystem. Are there other paths to these improvements? In short, yes. This page has a survey of the other methods for enabling OP_CHECKTEMPLATEVERIFY like functionality and why such techniques are not suitable substitutes.
OP_CHECKOUTPUTVERIFY MES16 presents an extension to Bitcoin’s script language enabling covenants, a primitive that allows transactions to restrict howthe value they transfer is used in the future.</description></item><item><title>Deployment Options</title><link>https://utxos.org/deployment/</link><pubDate>Fri, 27 Sep 2019 21:56:54 -0700</pubDate><guid>https://utxos.org/deployment/</guid><description>Deployment Schedule &amp;amp; Technique There is no presently defined deployment schedule for BIP-119.
There has been discussion on the mailing list about soft fork activation techniques as an extension to existing methods, but it is still undecided how new upgrades should be proposed, rolled out, and activated or rejected.
OP_CHECKTEMPLATEVERIFY Deployment Options There are a couple different implementations and deployment strategies for OP_CHECKTEMPLATEVERIFY:
OP_NOP4 Softfork Taproot Tapscript Extension Templated Tapscript Extension This page serves to mark the differences between these versions.</description></item><item><title>Sponsors</title><link>https://utxos.org/sponsors/</link><pubDate>Mon, 26 Jun 2017 18:27:58 +0100</pubDate><guid>https://utxos.org/sponsors/</guid><description>With thanks to the below institutions and individuals. Without their financial contributions and gifts of support, this work would not be possible.
If you are interested in becoming a supporter, please contact me at j@rubin.io or send Bitcoin to 3LPmfWnmQcPK1T9mSVGtoMmcQXbRAuUfus (signed here).
Binance X Fellowship Digital Contract Design Cipher Technologies Jim Calvin Corey Haddad Scaling Bitcoin Grant</description></item><item><title>Sponsorship Address</title><link>https://utxos.org/sponsors_addr/</link><pubDate>Mon, 26 Jun 2017 18:27:58 +0100</pubDate><guid>https://utxos.org/sponsors_addr/</guid><description>Message 3LPmfWnmQcPK1T9mSVGtoMmcQXbRAuUfus is a bitcoin address belonging to Judica, Inc for inbound gifts from utxos.org.
Signature BEGIN KEYBASE SALTPACK SIGNED MESSAGE. kXR7VktZdyH7rvq v5weRa0zkFdEUXp g9DGIq9pR5jmDYN e0jN8rKRbWu1Rfv YCQE1MvbsOXfFh3 z350TgyesDJpoRP te7nfpa7FcHjaSp i3aWtlPxqgpfa5Q iO8Fr3oZkqW60Gq jsw3cUtOPhAmsVt oeBQJCnGFeLnbxi 3wBlkUNrLzUCvnN H43C0YNEBotYIL4 bIthDOXGs08Gfdg PWDldPwEUcr0Zd6 6lyuVcRueNv8yJ3 utImxtYNuepajYX eSJRIbLm0oEQkKy L2kwbmodHBz6isI NBxRs00QuJdKzqD x5aAOAIvWanhqCn 7MAVqpFjAUTwcJU ssKPpq9de. END KEYBASE SALTPACK SIGNED MESSAGE.</description></item><item><title>BIP-119 Signalled Support</title><link>https://utxos.org/signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://utxos.org/signals/</guid><description>The following organizations, individuals, or pools have communicated preference for and intent to support a BIP-119 activation attempt using reasonable parameters. These &amp;ldquo;soft signals&amp;rdquo; are non-binding until an actual concrete proposal has been formed, but are useful for measuring community consensus. When a concrete proposal (e.g., parameters, binaries, etc) is launched, signatories on this list should not be considered to be supportive of that particular effort unless noted otherwise.
Open an issue or a pull request on GitHub to modify or create or modify an entry for you or your organization.</description></item><item><title>BIP-119 Workshops</title><link>https://utxos.org/workshops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://utxos.org/workshops/</guid><description>VR Workshop As a result of COVID-19, it&amp;rsquo;s been a large challenge to host events. We may be planning a VR workshop to discuss BIP-119 deployment &amp;ndash; stay tuned!
SF Workshop On February 1st, 2020 we held a workshop in downtown San Francisco to aid in reviewing and advancing OP_CHECKTEMPLATEVERIFY hosted at Digital Garage.
You can acesss the live stream recordings:
Part 1 Part 2 And view the slides here.</description></item></channel></rss>