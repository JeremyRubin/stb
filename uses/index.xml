<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Uses Cases on utxos.org -- Bitcoin for Everyone</title><link>https://utxos.org/uses/</link><description>Recent content in Uses Cases on utxos.org -- Bitcoin for Everyone</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 30 Nov 2024 18:01:56 -0500</lastBuildDate><atom:link href="https://utxos.org/uses/index.xml" rel="self" type="application/rss+xml"/><item><title>Scaling</title><link>https://utxos.org/uses/scaling/</link><pubDate>Thu, 10 Oct 2019 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/scaling/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/scalepay.svg" alt="">&lt;/p>
&lt;p>When there is a high demand for blockspace it becomes very expensive to make
transactions. By using OP_CHECKTEMPLATEVERIFY, a large volume payment processor may
aggregate all their payments into a single O(1) transaction for purposes of
confirmation. Then, some time later, the payments can be expanded out of that
UTXO when the demand for blockspace is decreased.&lt;/p>
&lt;p>Without OP_CHECKTEMPLATEVERIFY, this is still possible to do with Schnorr signatures
(even with ECDSA given multiparty schemes). However, it is not possible to do
non-interactively, which fundamentally limits the viability of the approach as
interacting to collect signatures from all recipients may be difficult or slow.&lt;/p></description></item><item><title>Soft Fork Bets</title><link>https://utxos.org/uses/taproot-bet/</link><pubDate>Mon, 08 Mar 2021 00:00:00 -0700</pubDate><guid>https://utxos.org/uses/taproot-bet/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/taproot-bet.jpg" alt="">&lt;/p>
&lt;p>Can we design a contract which allows someone to automatically place a series of bets on if Taproot was active (by spreading the bet over a longer window, you can hedge the total risk if you aren’t sure the exact period it would activate; it also makes the contract more interesting… The diagram above gives a high level overview of the logic we want to implement&amp;hellip;&lt;/p>
&lt;p>&lt;a href="https://blog.bitmex.com/taproot-you-betcha/">Continue Reading on Bitmex Blog&amp;hellip;&lt;/a>&lt;/p></description></item><item><title>Ark V2</title><link>https://utxos.org/uses/arkv2/</link><pubDate>Mon, 10 Jun 2024 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/arkv2/</guid><description>&lt;blockquote>
&lt;p>Ark v2 enables Ark Service Providers (ASPs) to reclaim their liquidity
without having to wait for the expiration period (4 weeks) to elapse. It
almost sounds too good to be true, ha?&lt;/p>
&lt;/blockquote>
&lt;p>Continue Reading on &lt;a href="https://brqgoo.medium.com/introducing-ark-v2-2e7ab378e87b">Medium&lt;/a>.&lt;/p></description></item><item><title>Bitcoin Clique</title><link>https://utxos.org/uses/clique/</link><pubDate>Mon, 10 Jun 2024 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/clique/</guid><description>&lt;p>Blockchains suffer from scalability limitations, both in terms of latency and
throughput. Various approaches to alleviate this have been proposed, most
prominent of which are payment and state channels, sidechains, commit-chains,
rollups, and sharding. This work puts forth a novel commit-chain protocol,
Bitcoin Clique. It is the first trustless commit-chain that is compatible with
all major blockchains, including (an upcoming version of) Bitcoin.&lt;/p>
&lt;p>Clique enables a pool of users to pay each other off-chain, i.e., without
interacting with the blockchain, thus sidestepping its bottlenecks. A user can
directly send its coins to any other user in the Clique: In contrast to payment
channels, its funds are not tied to a specific counterparty, avoiding the need
for multi-hop payments. An untrusted operator facilitates payments by
verifiably recording them.&lt;/p></description></item><item><title>Pathcoin</title><link>https://utxos.org/uses/pathcoin/</link><pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate><guid>https://utxos.org/uses/pathcoin/</guid><description>&lt;p>Transfer ownership of UTXO off-chain&lt;/p>
&lt;p>Proof of Concept: &lt;a href="https://github.com/AdamISZ/pathcoin-poc">GitHub Repository&lt;/a>&lt;/p></description></item><item><title>CTV dramatically improves DLCs</title><link>https://utxos.org/uses/dlc-perf/</link><pubDate>Mon, 24 Jan 2022 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/dlc-perf/</guid><description>&lt;p>The post discusses how OP_CHECKTEMPLATEVERIFY (CTV) significantly improves the
performance of Discreet Log Contracts (DLCs) on Bitcoin. It details the current
state of DLC protocols, the computational complexities involved, and how CTV
can optimize these processes. By using CTV and Taproot, DLCs can reduce
computational costs and data exchanges, simplify threshold oracle setups, and
eliminate certain multiplications. These improvements make DLC transactions
faster and more efficient, even on resource-constrained devices, though with
some trade-offs in witness size and transaction distinguishability.&lt;/p></description></item><item><title>Decentralized options</title><link>https://utxos.org/uses/options/</link><pubDate>Sun, 11 Oct 2020 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/options/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/options.png" alt="">&lt;/p>
&lt;p>Trading of bitcoin derivatives is a huge market nowadays. However, all of it occurs on centralized exchanges with large legal &amp;amp; technical risks that require trust in their operators, thus betraying the philosophy of Bitcoin. The protocol presented here enables the creation and redemption of trustless options on the Bitcoin network.&lt;/p>
&lt;h2 id="main-protocol">Main protocol&lt;/h2>
&lt;p>Option creation will follow this protocol:&lt;/p>
&lt;ol>
&lt;li>Use an atomic swap to sync these two operations:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>User pays fee to underwriter&lt;/li>
&lt;li>Underwriter sends tokenized USD [1] to an address that is encumbered by the script:
&lt;ul>
&lt;li>After X+K blocks:
&lt;ul>
&lt;li>Send to underwriter&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>After X blocks:
&lt;ul>
&lt;li>If spending tx sends Y BTC to underwriter, send to user&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>When the option reaches maturity the user can exercise it by sending a transaction that:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Sends BTC to underwriter&lt;/li>
&lt;li>Spends the UTXO created on step 1 and sends it to the user&amp;rsquo;s wallet&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>If the user doesn&amp;rsquo;t exercise it on time the underwriter can just spend it to itself&lt;/li>
&lt;/ol>
&lt;h2 id="reduction-of-capital-requirement">Reduction of capital requirement&lt;/h2>
&lt;p>As it is, this protocol requires locking 100% of the collateral for as long as the option stays in effect, but it would also be possible to reduce the capital requirement quite substantially by changing the protocol to make the underwriter lock only 30-50% initially and, at option expiration, make it provide the rest of the payment in case the user decides to exercise the option. More concretely, this new protocol would look like:&lt;/p></description></item><item><title>Drivechains</title><link>https://utxos.org/uses/drivechains/</link><pubDate>Sun, 11 Oct 2020 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/drivechains/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/drivechains.png" alt="">&lt;/p>
&lt;h1 id="partial-retraction----please-see-below">Partial Retraction &amp;ndash; Please See Below&lt;/h1>
&lt;p>Drivechain&amp;rsquo;s peg-out mechanism could be implemented at the transaction level through scripts that force the funds being withdrawn from the sidechain to go through a chain of N transactions, each one of these being in a different block. More specifically, this would be implemented by creating N scripts that would contain an integer constant and would only be spendable to another copy of the same script with the constant increased or decreased by one, with the exception of the script where the constant reaches the value N, in which case the UTXO would be spendable only to a specific address provided in the beginning of the process. Furthermore, these scripts would prevent the possibility of several of them being chained in the same block through the use of &lt;code>OP_CSV&lt;/code>.&lt;/p></description></item><item><title>Batch Channels</title><link>https://utxos.org/uses/batch-channels/</link><pubDate>Fri, 18 Oct 2019 10:46:27 -0700</pubDate><guid>https://utxos.org/uses/batch-channels/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/balllightning.svg" alt="">&lt;/p>
&lt;p>Using OP_CHECKTEMPLATEVERIFY for Channel Factories is similar to the use for Congestion
Control, except the leaf nodes should be set up as a channels instead of plain
payments. The channel can be between the sender and recipient or a target of
recipient&amp;rsquo;s choice. Using an OP_CHECKTEMPLATEVERIFY, the recipient may even
give the sender an address which makes a set of channels unbeknownst to them.&lt;/p>
&lt;p>These channels are already time insensitive for setup, as all punishments can be
relative timelocked to the actual instantiation. This enables set-up of channels
non-interactively in the case of a single funder.&lt;/p></description></item><item><title>Non Interactive Channels</title><link>https://utxos.org/uses/non-interactive-channels/</link><pubDate>Fri, 18 Oct 2019 10:46:13 -0700</pubDate><guid>https://utxos.org/uses/non-interactive-channels/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/nic.svg" alt="">&lt;/p>
&lt;p>Normally, when opening a payment channel, you require participation from both
parties to the channel. This is because the Lightning Network uses pre-signed
multi-sig type transactions to ensure that a channel can always be exited by
either party, before entering.&lt;/p>
&lt;p>With OP_CHECKTEMPLATEVERIFY, it&amp;rsquo;s possible for a single party to construct a
channel which either party can exit from without requiring signatures from
both parties.&lt;/p>
&lt;p>These payment channels can operate in one direction, paying to the channel
&amp;ldquo;listener&amp;rdquo; without need for their private key to be online.&lt;/p></description></item><item><title>Trustless Coordination-Free Mining Pools</title><link>https://utxos.org/uses/miningpools/</link><pubDate>Fri, 18 Oct 2019 10:45:58 -0700</pubDate><guid>https://utxos.org/uses/miningpools/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/bagpool.svg" alt="">&lt;/p>
&lt;p>&lt;em>for more detail on decentralized mining pools in a more recent article &lt;a href="https://rubin.io/bitcoin/2021/12/12/advent-15/">read here&lt;/a>&lt;/em>&lt;/p>
&lt;p>In a typical mining pool, miners works together to create a shared block reward. The shared reward
is distributed among participants based on difficulty shares, that is, partial work proofs that
&amp;ldquo;prove&amp;rdquo; a miner was working on an appropriate block.&lt;/p>
&lt;p>An appropriate block pays the reward to the pool operator, who then distributes (less a fee) the
rewards to the other miners.&lt;/p></description></item><item><title>Vaults</title><link>https://utxos.org/uses/vaults/</link><pubDate>Fri, 18 Oct 2019 10:45:51 -0700</pubDate><guid>https://utxos.org/uses/vaults/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/vaults.svg" alt="">
When greater security is required for cold storage solutions, there can be
default Tapscript paths that move funds from one target to another target.&lt;/p>
&lt;p>For example, a cold wallet can be set up where one customer support desk can,
without further authorization, move a portion of the funds (using multiple
pre-set amounts) into a lukewarm wallet operated by an isolated support desk.
The support desk can then issue some funds to a hot wallet, and send the
remainder back to cold storage with a similar withdrawal mechanism in place.&lt;/p></description></item><item><title>Safer Hashed Time Locked Contracts (HTLCS) Limits</title><link>https://utxos.org/uses/htlcs/</link><pubDate>Fri, 18 Oct 2019 10:30:40 -0700</pubDate><guid>https://utxos.org/uses/htlcs/</guid><description>&lt;p>&lt;img src="https://utxos.org/images/uses/htlcs.png" alt="">&lt;/p>
&lt;p>In the Lightning Network protocol, Hashed Time Locked Contracts (HTLCS) are used
in the construction of channels. A new HTLC is required per route that the
channel is serving in.&lt;/p>
&lt;p>In &lt;a href="https://github.com/lightningnetwork/lightning-rfc/blob/master/02-peer-protocol.md">BOLT #2&lt;/a>,
this maximum number of HTLCs in a channel is hard limited to 483 as the maximum
safe size to prevent the transaction from being too large to be valid. Adding
more HTLCs would interfere with being able to broadcast and confirm a
transaction.&lt;/p></description></item></channel></rss>